apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-s3-esp-stg-cm-files
spec:
  accessModes:
    - ReadWriteMany # Supported options: ReadWriteMany / ReadOnlyMany
  storageClassName: '' # Required for static provisioning
  capacity:
    storage: 100Gi # Ignored, required
  claimRef: # To ensure no other PVCs can claim this PV
    name: pvc-s3-esp-stg-cm-files
    namespace: esp-hims-stg
  csi:
    driver: s3.csi.aws.com # Required
    volumeAttributes:
      bucketName: s3-esp-stg-cm-files
    volumeHandle: s3-esp-stg-cm-files # Required
  mountOptions:
    - allow-other
    - allow-delete
    - region ap-northeast-2
  persistentVolumeReclaimPolicy: Retain
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-s3-esp-stg-cm-files
  namespace: esp-hims-stg
spec:
  accessModes:
    - ReadWriteMany # Supported options: ReadWriteMany / ReadOnlyMany
  storageClassName: '' # Required for static provisioning
  resources:
    requests:
      storage: 100Gi # Ignored, required
  volumeName: pv-s3-esp-stg-cm-files
---
apiVersion: v1
kind: Pod
metadata:
  name: s3-app-test
  namespace: esp-hims-stg
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "arch-type"
            operator: In
            values:
            - "arm64"
  containers:
    - name: app
      resources:
        limits:
          cpu: 1000m
          memory: 1000Mi
        requests:
          cpu: 10m
          memory: 100Mi
      image: centos
      command: ['/bin/sh']
      args: ['-c', "echo 'Hello from the container!' >> /data/$(date -u).txt; tail -f /dev/null"]
      volumeMounts:
        - name: persistent-storage
          mountPath: /data
  volumes:
    - name: persistent-storage
      persistentVolumeClaim:
        claimName: pvc-s3-esp-stg-cm-files
